library(ggplot2)
library(gridExtra)
library(cowplot)
library(grid)
library(ggsignif)
library(scales)
library(RColorBrewer)
# Sys.setenv(JAVA_HOME= 'C:\\Users\\lena_\\Downloads\\Matlab 2017a\\_temp_matlab_R2017a_win64\\sys\\java\\jre\\win64\\jre')
# library(rJava)
library(openxlsx)
library(qpcR)
#### set some parameters and stuff
# setwd('C:/Users/Gschossmann/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/Analysis Code/PCR/')
# filepath = 'Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/analysis'
setwd('C:/Users/Gschossmann/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/Analysis Code/PCR')
filepath = 'C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/analysis'
##### Input
numRepl = 2 #number of technical replicates
HKG = c('HPRT', 'GAPDH') #number of housekeeping genes
acceptable_diff = 0.5 #between replicates
exclude_weirdEffs = 1 #set to 1 when samples with efficiencies <1.9 or >2.1 shall be excluded
methodEff = 'cpD2' #determines from which point the efficiency is calculated (for clarification see: qpcR documentation)
# cpD2: max of sec. derivative | cpD1: max of first derivative | maxE: max of efficiency curve | expR: from exponential region=cpD2-(cpD1-cpD2)
excludeAnimal = c('26','17')
IC_correction = 1 #set to 1 if there is an Internal Control on every plate that should be used for correction of interplate variability; else set 0
Group = c('HR', 'LR')
Control = 'IR'
#####
#Filepaths for raw Cq data:
f1='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/150618/csv files/Results_Mitogenes_plate1_LG_150618 - '   #= plate1
f2='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/180618/csv files/Results_Mitogenes_plate2_LG_180618 - '   #= plate2
f3='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/190618/csv files 1/Results_Mitogenes_plate3_LG_190618 - '   #= plate3...
f4='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/190618/csv files 2/Results_Mitogenes_plate4_LG_190618 - '
f5='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/200618/csv files/Results_Mitogenes_plate5_LG_200618 - '
f6='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/050718/csv files 1/Results_Mitogenes_plate6_LG_050718 - '
f7='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/050718/csv files 2/Results_Mitogenes_plate7_LG_050718 - '
f8= 'C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/060718/csv files 1/Results_Mitogenes_plate8_LG_060718 - '
f9='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/060718/csv files 2/Results_Mitogenes_plate9_LG_060718 - '
f10='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/090718/csv files 1/Results_Mitogenes_plate10_LG_090718 - '
f11='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/100718/csv files/Results_Mitogenes_plate11_LG_100718 - '
f12='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/110718/csv files/Results_Mitogenes_plate12_LG_110718 - '
f13='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/160718/csv files 1/Results_Mitogenes_plate13_LG_160718 - '
f14='C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/160718/csv files 2/Results_Mitogenes_plate14_LG_160718 - '
# f1='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/150618/csv files/Results_Mitogenes_plate1_LG_150618 - '   #= plate1
# f2='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/180618/csv files/Results_Mitogenes_plate2_LG_180618 - '   #= plate2
# f3='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/190618/csv files 1/Results_Mitogenes_plate3_LG_190618 - '   #= plate3...
# f4='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/190618/csv files 2/Results_Mitogenes_plate4_LG_190618 - '
# f5='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/200618/csv files/Results_Mitogenes_plate5_LG_200618 - '
# f6='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/050718/csv files 1/Results_Mitogenes_plate6_LG_050718 - '
# f7='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/050718/csv files 2/Results_Mitogenes_plate7_LG_050718 - '
# f8= 'Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/060718/csv files 1/Results_Mitogenes_plate8_LG_060718 - '
# f9='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/060718/csv files 2/Results_Mitogenes_plate9_LG_060718 - '
# f10='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/090718/csv files 1/Results_Mitogenes_plate10_LG_090718 - '
# f11='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/100718/csv files/Results_Mitogenes_plate11_LG_100718 - '
# f12='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/110718/csv files/Results_Mitogenes_plate12_LG_110718 - '
# f13='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/160718/csv files 1/Results_Mitogenes_plate13_LG_160718 - '
# f14='Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/160718/csv files 2/Results_Mitogenes_plate14_LG_160718 - '
f_effs = c(f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14) #idx has to represent plate number
#####
# savepath = 'Y:/Lena/Bachelorthesis/Experiments/PCR/Mito_gene_expression/analysis/analysed files'
savepath = 'C:/Users/lena_/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/PCR/Mito_gene_expression/analysis/analysed files'
#####
source('C:/Users/Gschossmann/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/Analysis Code/PCR/qPCR_Efficiency/qpcR_Efficiencies.R')
source('C:/Users/Gschossmann/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/Analysis Code/PCR/SupplementaryFunctions/qPCR_replAveraging.R')
source('C:/Users/Gschossmann/Dropbox/studies/Osnabrück/Universität/Bachelorarbeit_DroBo/experiments/Analysis Code/PCR/SupplementaryFunctions/qPCR_Dixon_Outlier.R')
####################################################################################
# import data from CFX manager exported excel table that has been collected in 1 excel
# the imported data table shall have following columns: plate, date, threshold, animal, group, well, Gene, Cq value
data_tot = read.csv(paste(filepath, 'part1.csv', sep='/'), dec='.', sep=';', stringsAsFactors = FALSE)
colnames(data_tot) = c('Threshold', 'Plate', 'Well', 'Gene', 'Animal', 'Group', 'Cq')
data_tot = data_tot[which(data_tot$Animal != 'NTC'),]  #Kick out NTCs
data_tot = data_tot[!(is.na(data_tot$Cq)),]
# data_tot = data_tot[!(data_tot$Animal %in% excludeAnimal),] #Kick out animals that shall be excluded
##### get some fix variables extracted
plates= sort(unique(data_tot$Plate))
animals = as.character(unique(data_tot$Animal))
# animals_perPlate
genes = as.character(unique(data_tot$Gene))
GOI = genes[!(genes %in% HKG)]
genes = append(HKG, as.character(GOI)) #so that the HKG come as first elements
Treatments = c(Group, Control)
#####
## Substitute Well names (A01 -> A1) for compatibility reasons
withZeros = c('01','02','03','04','05','06','07','08','09')
noZeros=c('1','2','3','4','5','6','7','8','9')
for(iNumber in 1:length(withZeros)){
data_tot$Well[grep(withZeros[iNumber], data_tot$Well[])] = gsub(withZeros[iNumber], noZeros[iNumber], data_tot$Well[grep(withZeros[iNumber], data_tot$Well[])])
}
####
